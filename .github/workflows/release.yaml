name: Release 

on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      next_version: ${{ steps.semver.outputs.next }}
      bump-commit-sha: ${{ steps.commit.outputs.commit-sha }}

    steps:
    - name: Generate token
      id: generate_token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}
      
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ steps.generate_token.outputs.token }}
    
    - name: Get Next Version
      id: semver
      uses: ietf-tools/semver-action@v1
      with:
        token: ${{ steps.generate_token.outputs.token }}
        branch: main
        majorList: major
        patchList: chore, fix, bugfix, perf, refactor, test, tests
    
    - name: Update Cargo.toml Version
      run: |
        VERSION="${{ steps.semver.outputs.next }}"
        VERSION_CLEAN="${VERSION#v}"  # Remove leading 'v' if present
        sed -i "s/^version = .*/version = \"$VERSION_CLEAN\"/" Cargo.toml
        cargo update --package ridi-router
        
    - name: Generate Release Notes
      run: |
        git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)..HEAD --pretty=format:"* %s" > RELEASE_NOTES.md
        
    - name: Commit Version Update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml
        git add Cargo.lock
        git diff --staged --quiet || git commit -m "chore: bump version to ${{ steps.semver.outputs.next }}"
        git push origin main

    - name: Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: RELEASE_NOTES
        path: RELEASE_NOTES.md

    - name: Get commit SHA
      id: commit
      run: echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  build-debug-viewer:
    needs: prepare-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-version.outputs.bump-commit-sha }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Cache cargo and build files
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-debug-viewer
          restore-keys: |
            ${{ runner.os }}-cargo-debug-viewer

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm/store
            src/debug/viewer/ui/node_modules
          key: ${{ runner.os }}-pnpm
          restore-keys: |
            ${{ runner.os }}-pnpm

      - name: Install node_modules
        run: |
          cd src/debug/viewer/ui/
          pnpm install

      - name: Build UI
        run: |
          cd src/debug/viewer/ui/
          pnpm build

      - name: Build with debug-viewer
        run: cargo build --release --target x86_64-unknown-linux-gnu --features debug-viewer

      - name: Prepare debug-viewer binary and create zip
        run: |
          mkdir dist
          cp "target/x86_64-unknown-linux-gnu/release/ridi-router" "dist/ridi-router-debug-viewer-linux-amd64"
          chmod +x "dist/ridi-router-debug-viewer-linux-amd64"
          cd dist
          zip "ridi-router-debug-viewer-linux-amd64.zip" "ridi-router-debug-viewer-linux-amd64"

      - name: Upload debug-viewer binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-debug-viewer-linux-amd64
          path: dist/*.zip

  build:
    needs: prepare-version
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-amd64
          - os: macos-latest
            name: macos-universal

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-version.outputs.bump-commit-sha }}
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin,aarch64-apple-darwin' || matrix.target }}
          target: nightly

      - name: Cache cargo and build files
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.target }}-cargo-

      - name: Build
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            # Build for both architectures
            cargo build --release --target x86_64-apple-darwin
            cargo build --release --target aarch64-apple-darwin
            
            # Create universal binary
            mkdir -p dist
            lipo -create \
              "target/x86_64-apple-darwin/release/ridi-router" \
              "target/aarch64-apple-darwin/release/ridi-router" \
              -output "dist/ridi-router-${{ matrix.name }}"
            chmod +x "dist/ridi-router-${{ matrix.name }}"
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare binary and create zip
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/ridi-router.exe" "dist/ridi-router-${{ matrix.name }}.exe"
            cd dist
             powershell Compress-Archive "ridi-router-${{ matrix.name }}.exe" "ridi-router-${{ matrix.name }}.zip"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            # Binary already in dist from build step
            cd dist
            chmod +x "ridi-router-${{ matrix.name }}"
            zip "ridi-router-${{ matrix.name }}.zip" "ridi-router-${{ matrix.name }}"
          else
            cp "target/${{ matrix.target }}/release/ridi-router" "dist/ridi-router-${{ matrix.name }}"
            chmod +x "dist/ridi-router-${{ matrix.name }}"
            cd dist
            zip "ridi-router-${{ matrix.name }}.zip" "ridi-router-${{ matrix.name }}"
          fi

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.name }}
          path: dist/*.zip

  create-release:
    needs: [prepare-version, build, build-debug-viewer]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir release_files
          cp artifacts/binary-*/ridi-router-* release_files/
          cp artifacts/RELEASE_NOTES/RELEASE_NOTES.md .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-version.outputs.next_version }}
          name: Release ${{ needs.prepare-version.outputs.next_version }}
          body_path: RELEASE_NOTES.md
          files: |
            release_files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
